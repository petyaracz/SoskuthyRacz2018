)
)
server = function(input, output) {
observeEvent(input$goButton, {
generateAnecdote = function(){
intro = c(
"This reminds me of something very similar that happened to me thirty-four years ago.",
"This reminds me of something very similar that happened to me sixty-seven years ago.",
"This reminds me of something very similar that happened to me twenty-two years ago.",
"This reminds me of something very similar that happened to me fourty-nine years ago.",
"This reminds me of something very similar that happened to me ninety-six years ago.",
"This reminds me of something very similar that happened to me twenty-one years ago.",
"This reminds me of something very similar that happened to me four years ago."
)
absurdist_setup = c(
"At the time I was living in what used to be a large meat packing plant,",
"I used to go out in Belfast to steal people's Wellingtons that they left in front of their doors for the night,",
"I used to stay in a giant gingerbread house in a forest,",
"I was flatsharing in a large Georgian building in a part of England that no longer exists,",
"I had this habit of having Sunday roast in the same place in Edinburgh, a tiny Italian restaurant run by a couple on the run from the Bulgarian secret service,",
"A number of us chipped in to own this giant airship, that had run aground on the Cornish coast,",
"I was living in a chimney in Cardiff,"
)
absurdist_setup_contd = c(
"with a fidgety Senegalese trombone player and four zebras. They were not from Senegal.",
"with seven of my friends who were all brothers, each born within a year of each other.",
"with a giant talking plant. No, he wasn't carnivorous, and his name was Columbo, like in the crime series.",
"with members of my family that I hadn't seen before, nor had I known that they existed.",
"with a robot.",
"with sentient gaseous beings from Pluto.",
"with the Velvet Underground."
)
awkward_situation = c(
"One day, we decided to play a practical joke on the grim old man who lived in the last house at the end of the street. ",
"We made a bet to see who can hold his breath longer.",
"I decided to build a dinosaur out of scraps of metal I found in the local shipyard to impress a girl that I worked with in the same fishmonger's.",
"I wanted to write a song about this and play it at Michaelmas on the ancient water organ of the local church, which many people believed to be cursed.",
"I found a suit of armour in an alley and I thought it would be fun to surprise my friends by wearing it for breakfast.",
"We came together one Wednesday morning to bake the world's biggest black pudding.",
"Several of us banded together to sacrifice our old headmaster by throwing him into the volcano that dominated the island's skyline.",
"On a pleasant afternoon, I rowed out to sea in a rowboat to see whether I can be sucked up into the forming maelstrom."
)
awkward_situation_contd = c(
"Unfortunately, I tripped on my untied shoelaces and fell flat on the ground.",
"As luck would have it, I forgot to wear a belt, and my trousers fell down to my ankles.",
"Alas, all the moisture in the air steamed up my glasses and I couldn't see where I was going.",
"Sad to say, I started fumbling with my cufflinks and got into a sordid squabble.",
"Who would have thought that I would get tangled up in my cotton stockings.",
"Regrettably, at this very moment I mixed up my arms and legs and started walking on my hands.",
"Worse luck, I just then turned into a liquid."
)
dark_twist = c(
"Then, a walrus came in, lit up its pipe, and sternly warned me about my behaviour.",
"At this moment, all the pebble in the ground formed into a giant hand that picked me up and lifted me to safety.",
"Immediately, a flock of songbirds arrived and cooled me with the flap of their fragile wings.",
"Suddenly, I realised I could fly by flapping my arms, and so I emerged in the air and soared the winds.",
"Then, the house started shaking and jam came out of the walls.",
"A leopard appeared. It was wearing a monocle and sounded like my late uncle.",
"At this very moment, all the furniture grew tiny legs and scuttered away making a noise like rain on fallen leaves.",
"Just then, the world ended."
)
nonsense_ending = c(
"This is how I learned the true spirit of Christmas.",
"I never spent a penny on chocolate again.",
"This is why I have a strange yearning for the sea ever since.",
"And so here we are."
)
a = sample(intro,1)
b = sample(absurdist_setup,1)
c = sample(absurdist_setup_contd,1)
d = sample(awkward_situation,1)
e = sample(awkward_situation_contd,1)
f = sample(dark_twist,1)
g = sample(nonsense_ending,1)
story = paste(a,b,c,d,e,f,g, sep = ' ')
print(story)
}
# builds a reactive expression that only invalidates
# when the value of input$goButton becomes out of date
# (i.e., when the button is pressed)
output$anecdote <- renderText({
generateAnecdote()
})
})
}
shinyApp(ui, server)
1100/297
800/3.7
1100/840
(1100/840) * 800
800 / (1100/840)
170/257
160/0.66
170/257
200/0.66
220/0.65
220/0.66
215/0.66
210/170
252/1.24
200/0.66
install.packages(c("ape", "backports", "bayesplot", "BH", "bibtex", "bit64", "boot", "broom", "car", "checkmate", "chron", "coin", "colourpicker", "corrplot", "cubature", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dplyr", "ecodist", "effects", "ellipse", "evaluate", "FactoMineR", "foreach", "foreign", "formatR", "Formula", "gdata", "geosphere", "git2r", "glmnet", "glue", "gridExtra", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httr", "igraph", "irlba", "iterators", "itsadug", "knitcitations", "knitr", "lattice", "lava", "lazyeval", "lme4", "lubridate", "mapproj", "markdown", "MASS", "Matrix", "MCMCglmm", "memoise", "mgcv", "mice", "msm", "MuMIn", "NLP", "openssl", "pander", "party", "phangorn", "phytools", "PKI", "plotfunctions", "plotly", "plotrix", "psych", "purrr", "quantreg", "RandomFields", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "RefManageR", "registry", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "rpart", "rprojroot", "rsconnect", "RSQLite", "rstan", "rstudioapi", "scales", "scatterplot3d", "shinyjs", "shinystan", "simr", "sp", "SparseM", "splancs", "StanHeaders", "stringdist", "stringi", "subplex", "tau", "threejs", "tibble", "tidyr", "tidyverse", "tm", "vcd", "visdat", "withr", "XML", "xts", "yaml"))
#############################################################################################
# data and code for the paper
#############################################################################################
setwd("/Users/pracz/Work/Bristol/cicamica/publication_scripts/")
library(arm)
library(lme4)
library(reshape2)
library(ggplot2)
library(stringr)
library(knitr)
library(effects)
library(dplyr)
library(Cairo)
#############################################################################################
# datasets
#############################################################################################
# filtered corpus of echo pairs
cica.corp <- read.csv('1a_m_boolean_2_with_rules_tidy.csv')
# filtered experiment data
cica.long <- readRDS('cica_all_gcm.rds')
gcm.preds <- cica.long %>% dplyr::select(summary,gcm.big) %>% unique
gcm.preds <- mutate(gcm.preds, trs=recode(summary,
`ácó`="aːtsoː",
`agyor`="ɒɟor",
`azsu`="ɒʒu",
`cege`="tsɛgɛ",
`csanyi`="tʃɒɲi",
`csükő`="tʃykøː",
`cségi`="tʃeːgi",
`éce`="eːtsɛ",
`ecsa`="ɛtʃɒ",
`édeg`="eːdɛg",
`ége`="eːgɛ",
`éki`="eːki",
`esző`="ɛsøː",
`etyő`="ɛcøː",
`fázsi`="faːʒi",
`föke`="føkɛ",
`getye`="gɛcɛ",
`gótyi`="goːci",
`gyudó`="ɟudoː",
`hácog`="haːtsog",
`ilász`="ilaːs",
`inó`="inoː",
`ityi`="ici",
`kasó`="kɒʃoː",
`kegya`="kɛɟɒ",
`kücsi`="kytʃi",
`kunor`="kunor",
`láki`="laːki",
`lászi`="laːsi",
`öcő`="øtsøː",
`odó`="odoː",
`óli`="oːli",
`óti`="oːti",
`rudog`="rudog",
`rüli`="ryli",
`runya`="ruɲɒ",
`szacsog`="sɒtʃog",
`szece`="sɛtsɛ",
`ucser`="utʃɛr",
`udok`="udok",
`ugó`="ugoː",
`ükér`="ykeːr",
`unyog`="uɲog",
`úszog`="uːsog",
`uzsó`="uʒoː",
`vikér`="vikeːr",
`zédál`="zeːdaːl",
`zinya`="ziɲɒ"))
# so that "m" is unmarked and "b" is marked in stats & graphs
cica.long$behaviour <- factor(cica.long$behaviour, levels=c("m","b"))
cica.sum <- cica.long %>% mutate(is.b = ifelse(behaviour == 'b', T, F)) %>% group_by(summary,filledO1,voicedO2) %>% summarise(b.prop = mean(is.b))
cica.sum <- cica.sum %>% merge(gcm.preds)
cica.sum$O1.supports <- ifelse(cica.sum$filledO1 == T, '[m]', '[b]')
cica.sum$C2.supports <- ifelse(cica.sum$voicedO2 == T, '[b]', '[m]')
# empty O1 -> b
# voi C -> b
knitr::opts_chunk$set(dev='cairo_pdf')
ggplot(cica.sum, aes(x = gcm.big, y = b.prop, label = trs, colour = O1.supports)) +
geom_text() +
ggtitle(paste0("experiment: raw proportions x GCM and Pattern 1 predictions")) +
ylab("proportion of [b] vs [m]") + xlab("GCM weight of [b] vs [m]") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
scale_colour_manual(values=c("deepskyblue4","firebrick3"))
ggsave("gcm_pattern1.pdf", width=8, height=6, device = cairo_pdf) # ...
ggplot(cica.sum, aes(x = gcm.big, y = b.prop, label = trs, colour = O2.supports)) +
geom_text() +
ggtitle(paste0("experiment: raw proportions x GCM and Pattern 2 predictions")) +
ylab("proportion of [b] vs [m]") + xlab("GCM weight of [b] vs [m]") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
scale_colour_manual(values=c("deepskyblue4","firebrick3"))
ggplot(cica.sum, aes(x = gcm.big, y = b.prop, label = trs, colour = C2.supports)) +
geom_text() +
ggtitle(paste0("experiment: raw proportions x GCM and Pattern 2 predictions")) +
ylab("proportion of [b] vs [m]") + xlab("GCM weight of [b] vs [m]") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
scale_colour_manual(values=c("deepskyblue4","firebrick3"))
ggsave("gcm_pattern2.pdf", width=8, height=6, device = cairo_pdf) # ...
setwd("/Users/pracz/Work/Bristol/cicamica/publication_scripts/")
library(arm)
library(lme4)
library(reshape2)
library(ggplot2)
library(stringr)
library(knitr)
library(effects)
library(dplyr)
library(Cairo)
# filtered corpus of echo pairs
cica.corp <- read.csv('1a_m_boolean_2_with_rules_tidy.csv')
# filtered experiment data
cica.long <- readRDS('cica_all_gcm.rds')
gcm.preds <- cica.long %>% dplyr::select(summary,gcm.big) %>% unique
gcm.preds <- mutate(gcm.preds, trs=recode(summary,
`ácó`="aːtsoː",
`agyor`="ɒɟor",
`azsu`="ɒʒu",
`cege`="tsɛgɛ",
`csanyi`="tʃɒɲi",
`csükő`="tʃykøː",
`cségi`="tʃeːgi",
`éce`="eːtsɛ",
`ecsa`="ɛtʃɒ",
`édeg`="eːdɛg",
`ége`="eːgɛ",
`éki`="eːki",
`esző`="ɛsøː",
`etyő`="ɛcøː",
`fázsi`="faːʒi",
`föke`="føkɛ",
`getye`="gɛcɛ",
`gótyi`="goːci",
`gyudó`="ɟudoː",
`hácog`="haːtsog",
`ilász`="ilaːs",
`inó`="inoː",
`ityi`="ici",
`kasó`="kɒʃoː",
`kegya`="kɛɟɒ",
`kücsi`="kytʃi",
`kunor`="kunor",
`láki`="laːki",
`lászi`="laːsi",
`öcő`="øtsøː",
`odó`="odoː",
`óli`="oːli",
`óti`="oːti",
`rudog`="rudog",
`rüli`="ryli",
`runya`="ruɲɒ",
`szacsog`="sɒtʃog",
`szece`="sɛtsɛ",
`ucser`="utʃɛr",
`udok`="udok",
`ugó`="ugoː",
`ükér`="ykeːr",
`unyog`="uɲog",
`úszog`="uːsog",
`uzsó`="uʒoː",
`vikér`="vikeːr",
`zédál`="zeːdaːl",
`zinya`="ziɲɒ"))
# so that "m" is unmarked and "b" is marked in stats & graphs
cica.long$behaviour <- factor(cica.long$behaviour, levels=c("m","b"))
# model
cica.corp <- cica.corp %>% mutate_if(is.logical, as.factor)
cica.corp.mod1 <- glm(behaviour ~ filledO1 * voiced.second.consonant, data=cica.corp, family="binomial")
# plot
cica.corp.props1 <- dplyr::count(cica.corp, filledO1, voiced.second.consonant, behaviour) %>% mutate(prop=prop.table(n))
preds <- allEffects(cica.corp.mod1)[[1]]
preds <- cbind(preds[[6]], invlogit(preds$fit), invlogit(preds$lower), invlogit(preds$upper))
colnames(preds)[3:5] <- c("behaviour","lower","upper")
preds$filledO1 <- ifelse(preds$filledO1=="TRUE", "filled O1", "empty O1")
preds$voiced.second.consonant <- ifelse(preds$voiced.second.consonant=="TRUE", "voiced 2nd C", "voiceless 2nd C")
cica.corp.ns <- aggregate(n ~ filledO1 + voiced.second.consonant, cica.corp.props1, FUN=sum)
cica.corp.ns$n.text <- paste("n =", cica.corp.ns$n)
cica.corp.ns$behaviour <- "b"
# start with raw data, superpose preds
ggplot(cica.corp.props1, aes(x=voiced.second.consonant, fill=behaviour)) +
geom_bar(aes(y=prop), stat="identity", position="stack") +
geom_text(data=cica.corp.ns, aes(label=n.text), y=0.05) +
facet_wrap(~filledO1) +
ggtitle(paste0("raw proportions and model predictions (n=",nrow(cica.corp),")")) +
geom_point(data=preds, aes(x=voiced.second.consonant, y=behaviour, fill=NULL), size=3) +
geom_errorbar(data=preds, aes(x=voiced.second.consonant, ymin=lower, ymax=upper, fill=NULL), width=0.2) +
theme_bw() +
scale_fill_manual(values=c("firebrick3", "deepskyblue4"), name="echo\nbehaviour", labels=c("[m]","[b]")) +
ylab("proportion of [b] vs [m]") + xlab("") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold"))
ggsave("corpus_props.pdf", width=8, heigh=4)
# model
cica.long$filledO1.num <- as.numeric(cica.long$filledO1)
cica.long$filledO1.fact <- factor(cica.long$filledO1)
cica.long$m.left.num <- as.numeric(cica.long$m.left)
cica.long$m.left.fact <- factor(cica.long$m.left)
cica.long$voicedO2.num <- as.numeric(cica.long$voicedO2)
cica.long$voicedO2.fact <- factor(cica.long$voicedO2)
# mod.fuller <- glmer(behaviour ~
#                      filledO1.fact + voicedO2.fact +
#                      m.left.fact +
#                      (filledO1.num + voicedO2.num | responseid) +
#                      (1 | summary),
#             data=cica.long, family="binomial", control=glmerControl(optimizer="bobyqa"))
# save(mod.fuller, file = 'modfuller.rda')
load('modfuller.rda')
# plot
by.set.props <- cica.long %>% dplyr::count(filledO1, voicedO2, behaviour) %>% mutate(prop = prop.table(n))
by.set.props$filledO1 <- ifelse(by.set.props$filledO1, "filled O1", "empty O1")
by.set.props$voiced.second.consonant <- ifelse(by.set.props$voicedO2, "voiced 2nd C", "voiceless 2nd C")
preds <- Effect(c("filledO1.fact","voicedO2.fact"), mod.fuller)
preds <- cbind(preds[[6]], invlogit(preds$fit), invlogit(preds$lower), invlogit(preds$upper))
colnames(preds)[3:5] <- c("behaviour","lower","upper")
preds$filledO1 <- ifelse(preds$filledO1.fact=="TRUE", "filled O1", "empty O1")
preds$voiced.second.consonant <- ifelse(preds$voicedO2.fact=="TRUE", "voiced 2nd C", "voiceless 2nd C")
# needs by.set.props, generated earlier
ggplot(by.set.props, aes(x=voiced.second.consonant, fill=behaviour)) +
geom_bar(aes(y=prop), stat="identity", position="stack") +
facet_wrap(~filledO1) +
geom_point(data=preds, aes(x=voiced.second.consonant, y=behaviour, fill=NA), size=3) +
geom_errorbar(data=preds, aes(x=voiced.second.consonant, ymin=lower, ymax=upper, fill=NA), width=0.2) +
theme_bw() +
ggtitle(paste0("raw proportions and model predictions")) +
scale_fill_manual(values=c("deepskyblue4","firebrick3"), name="echo\nbehaviour", labels=c("[b]","[m]")) +
ylab("proportion of [b] vs [m]") + xlab("") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold"))
ggsave("exp_props.pdf", width=8, height=4)
# mod.fuller.new <- glmer(behaviour ~
#                      filledO1 + voicedO2 +
#                      m.left +
#                      (1 + filledO1 + voicedO2 | responseid) +
#                      (1 | summary),
#             data=cica.long, family="binomial", control=glmerControl(optimizer="bobyqa"))
# save(mod.fuller.new, file = 'modfullernew.rda')
load('modfullernew.rda')
iterations = 10000
preds <- predict(mod.fuller.new, cica.long, re.form=~(1 + filledO1 + voicedO2 | responseid), type="response")
sim.matrix <- matrix(rep(0,iterations*48), nrow=48)
rownames(sim.matrix) <- names(tapply(cica.long$behaviour=="b", cica.long$summary, FUN=mean))
for (i in 1:iterations) {
outcomes <- rbinom(n=preds, size=1, prob=preds)
sim.matrix[,i] <- tapply(outcomes, cica.long$summary, FUN=mean)
if (i %% 100 == 0) {cat("\r               \r", i)}
}
sim.pred <- apply(sim.matrix, 1, mean)
sim.lower <- apply(sim.matrix, 1, quantile, 0.025)
sim.upper <- apply(sim.matrix, 1, quantile, 0.975)
sim.dat <- data.frame(summary=rownames(sim.matrix), fit=sim.pred, lower=sim.lower, upper=sim.upper)
by.word.props <- cica.long %>%
dplyr::count(summary, filledO1, voicedO2, behaviour) %>%
mutate(prop = prop.table(n)) %>%
filter(behaviour=="b") %>%
dplyr::select(-behaviour, -n)
by.word.props <- left_join(by.word.props, sim.dat, by="summary")
by.word.props.lev <- unique(by.word.props$summary)
by.word.props.lev <- by.word.props.lev[with(by.word.props, order(filledO1, voicedO2, prop))]
by.word.props$summary <- factor(by.word.props$summary, levels=by.word.props.lev)
by.word.props$filledO1 <- ifelse(by.word.props$filledO1, "filled O1", "empty O1")
by.word.props$voicedO2 <- ifelse(by.word.props$voicedO2, "+voi O2", "–voi O2")
by.word.props$combined.pred <- paste(by.word.props$filledO1, by.word.props$voicedO2, sep=", ")
by.word.props$combined.pred <- factor(by.word.props$combined.pred, levels=c(
"empty O1, +voi O2",
"empty O1, –voi O2",
"filled O1, +voi O2",
"filled O1, –voi O2")
)
by.word.props <- mutate(by.word.props, trs=recode(summary,
`ácó`="aːtsoː",
`agyor`="ɒɟor",
`azsu`="ɒʒu",
`cege`="tsɛgɛ",
`csanyi`="tʃɒɲi",
`csükő`="tʃykøː",
`cségi`="tʃeːgi",
`éce`="eːtsɛ",
`ecsa`="ɛtʃɒ",
`édeg`="eːdɛg",
`ége`="eːgɛ",
`éki`="eːki",
`esző`="ɛsøː",
`etyő`="ɛcøː",
`fázsi`="faːʒi",
`föke`="føkɛ",
`getye`="gɛcɛ",
`gótyi`="goːci",
`gyudó`="ɟudoː",
`hácog`="haːtsog",
`ilász`="ilaːs",
`inó`="inoː",
`ityi`="ici",
`kasó`="kɒʃoː",
`kegya`="kɛɟɒ",
`kücsi`="kytʃi",
`kunor`="kunor",
`láki`="laːki",
`lászi`="laːsi",
`öcő`="øtsøː",
`odó`="odoː",
`óli`="oːli",
`óti`="oːti",
`rudog`="rudog",
`rüli`="ryli",
`runya`="ruɲɒ",
`szacsog`="sɒtʃog",
`szece`="sɛtsɛ",
`ucser`="utʃɛr",
`udok`="udok",
`ugó`="ugoː",
`ükér`="ykeːr",
`unyog`="uɲog",
`úszog`="uːsog",
`uzsó`="uʒoː",
`vikér`="vikeːr",
`zédál`="zeːdaːl",
`zinya`="ziɲɒ"))
p <- ggplot(by.word.props, aes(x=trs, y=prop)) +
facet_grid(~combined.pred, scales = "free", space = "free") +
geom_bar(stat="identity",fill="deepskyblue3") +
geom_errorbar(aes(ymax = upper, ymin = lower), position = position_dodge(), width = 0.5) +
geom_point(aes(y=fit)) +
ylim(c(0,1)) +
ylab("proportion of [b] behaviour") + xlab("") +
theme_bw() +
theme(axis.text.x = element_text(angle=60, hjust=1, size=10),
axis.text.y=element_text(size=12),
axis.title.x=element_blank(),
axis.title.y=element_text(size=14,face="bold"),
strip.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
ggtitle(paste0("by-item raw proportions and simulated predictions"))
cica.sum <- cica.long %>% mutate(is.b = ifelse(behaviour == 'b', T, F)) %>% group_by(summary,filledO1,voicedO2) %>% summarise(b.prop = mean(is.b))
cica.sum <- cica.sum %>% merge(gcm.preds)
cica.sum$O1.supports <- ifelse(cica.sum$filledO1 == T, '[m]', '[b]')
cica.sum$C2.supports <- ifelse(cica.sum$voicedO2 == T, '[b]', '[m]')
# empty O1 -> b
# voi C -> b
knitr::opts_chunk$set(dev='cairo_pdf')
ggplot(cica.sum, aes(x = gcm.big, y = b.prop, label = trs, colour = O1.supports)) +
geom_text() +
ggtitle(paste0("experiment: raw proportions x GCM and Pattern 1 predictions")) +
ylab("proportion of [b] vs [m]") + xlab("GCM weight of [b] vs [m]") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
scale_colour_manual(values=c("deepskyblue4","firebrick3"))
ggplot(cica.sum, aes(x = gcm.big, y = b.prop, label = trs, colour = C2.supports)) +
geom_text() +
ggtitle(paste0("experiment: raw proportions x GCM and Pattern 2 predictions")) +
ylab("proportion of [b] vs [m]") + xlab("GCM weight of [b] vs [m]") +
theme(axis.title=element_text(size=14, face="bold"),
axis.text=element_text(size=12),
strip.text=element_text(size=12),
legend.title=element_text(size=14,face="bold"),
legend.text=element_text(size=12),
plot.title=element_text(size=14,face="bold")) +
scale_colour_manual(values=c("deepskyblue4","firebrick3"))
try(setwd("/Users/pracz/Work/Bristol/SoskuthyRacz2018/"))
# filtered corpus of echo pairs
cica.corp <- read.csv('1a_m_boolean_2_with_rules_tidy.csv')
head(cica.corp)
# filtered experiment data
cica.long <- readRDS('cica_all_gcm.rds')
View(cica.long)
head(cica.long)
cica.corp$X = NULL
write.csv(cica.corp, file = 'echo_pair_corpus.csv')
ids = select(cica.long, response.id) %>% unique
ids = cica.long %>% dplyr::select(response.id) %>% unique
ids = cica.long %>% dplyr::select(responseid) %>% unique
ids$anonid = 1:nrow(ids)
View(ids)
ids$anonid = paste('subject', ids$anonid, sep = '')
View(cica.long)
View(ids)
cica.long  = merge(cica.long,ids)
cica.long$responseid = NULL
write.csv(cica.long, file = 'exp_data.csv', row.names = F)
# filtered experiment data
cica.long = read.csv('exp_data.csv')
cica.long$responseid = cica.long$anonid
head(cica.long)
head(cica.long,1)
